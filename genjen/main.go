package main

import (
	"strings"

	. "github.com/davelondon/jennifer/jen"
)

func main() {

	file := NewFile("jen")

	file.Comment("\tThis file is generated by genjen - do not edit!\n")
	file.Line()

	// This generates a function for each method. The
	// funciton creates a new statement and calls the
	// method.
	redirect := func(
		name string,
		comment Code,
		params []Code,
		call []Code,
	) {
		/*
			// {comment}
			func {name}({params}) *Statement {
				return newStatement().{name}({call})
			}
		*/
		file.Add(comment)
		file.Func().Id(name).Params(
			params...,
		).Op("*").Id("Statement").Block(
			Return().Id("newStatement").Call().Op(".").Id(name).Call(
				call...,
			),
		)
		/*
			// {comment}
			func (g *Group) {name}({params}) *Statement {
				s := {name}({call})
				g.items = append(g.items, s)
				return s
			}
		*/
		file.Add(comment)
		file.Func().Params(
			Id("g").Op("*").Id("Group"),
		).Id(name).Params(
			params...,
		).Op("*").Id("Statement").Block(
			Id("s").Op(":=").Id(name).Params(call...),
			Id("g", "items").Op("=").Append(Id("g", "items"), Id("s")),
			Return(Id("s")),
		)
	}

	for _, b := range Blocks {
		b := b // b used in closures
		if b.Name == "" {
			continue
		}
		comment := Commentf("%s inserts %s", b.Name, b.Desc)

		var variadic Code
		if b.List {
			variadic = Op("...")
		}

		redirect(
			b.Name,
			comment,
			[]Code{Id("c").Add(variadic).Id("Code")},
			[]Code{Id("c").Add(variadic)},
		)

		/*
			func (s *Statement) {Name}(c [...]Code) *Statement {
				g := Group{
					syntax: {Syntax},
					items:  []Code{c}|c,
				}
				s.items = append(s.items, g)
				return s
			}
		*/
		file.Add(comment)
		file.Func().Params(
			Id("s").Op("*").Id("Statement"),
		).Id(b.Name).Params(
			Id("c").Add(variadic).Id("Code"),
		).Op("*").Id("Statement").Block(
			Id("g").Op(":=").Op("&").Id("Group").Dict(map[Code]Code{
				Id("syntax"): Id(b.Syntax),
				Id("items"):  Do(func(s *Statement) {
					if b.List {
						s.Id("c")
					} else {
						s.Index().Id("Code").Values(Id("c"))
					}
				}),
			}),
			Id("s", "items").Op("=").Append(Id("s", "items"), Id("g")),
			Return(Id("s")),
		)

		nameFunc := b.Name + "Func"
		redirect(
			nameFunc,
			comment,
			[]Code{Id("f").Func().Params(Op("*").Id("Group"))},
			[]Code{Id("f")},
		)

		/*
			func (s *Statement) {NameFunc}(f func(*Group)) *Statement {
				g := &Group{
					syntax: {Syntax},
				}
				f(g)
				s.items = append(s.items, g)
				return s
			}
		*/
		file.Add(comment)
		file.Func().Params(
			Id("s").Op("*").Id("Statement"),
		).Id(nameFunc).Params(
			Id("f").Func().Params(Op("*").Id("Group")),
		).Op("*").Id("Statement").Block(
			Id("g").Op(":=").Op("&").Id("Group").Dict(map[Code]Code{
				Id("syntax"): Id(b.Syntax),
			}),
			Id("f").Call(Id("g")),
			Id("s", "items").Op("=").Append(Id("s", "items"), Id("g")),
			Return(Id("s")),
		)
	}

	type tkn struct {
		name      string
		cap       string
		tokenType string
		tokenDesc string
	}
	tokens := []tkn{}
	for _, v := range Identifiers {
		tokens = append(tokens, tkn{
			name:      v,
			cap:       strings.ToUpper(v[:1]) + v[1:],
			tokenType: "identifierToken",
			tokenDesc: "identifier",
		})
	}
	for _, v := range Keywords {
		tokens = append(tokens, tkn{
			name:      v,
			cap:       strings.ToUpper(v[:1]) + v[1:],
			tokenType: "keywordToken",
			tokenDesc: "keyword",
		})
	}

	for _, t := range tokens {
		t := t // used in closures
		comment := Commentf(
			"%s inserts the %s %s",
			t.cap,
			t.name,
			t.tokenDesc,
		)
		redirect(
			t.cap,
			comment,
			nil,
			nil,
		)

		/*
			func (s *Statement) {Name}() *Statement {
				t := token{
					typ:     {identifierToken|keywordToken},
					content: "{Name}",
				}
				s.items = append(s.items, t)
				return s
			}
		*/
		file.Add(comment)
		file.Func().Params(
			Id("s").Op("*").Id("Statement"),
		).Id(t.cap).Params().Op("*").Id("Statement").Block(
			Id("t").Op(":=").Id("token").Dict(map[Code]Code{
				Id("typ"):     Id(t.tokenType),
				Id("content"): Lit(t.name),
			}),
			Id("s", "items").Op("=").Append(Id("s", "items"), Id("t")),
			Return(Id("s")),
		)
	}

	for _, f := range Functions {
		f := f // used in closure
		capName := strings.ToUpper(f[:1]) + f[1:]
		comment := Commentf(
			"%s inserts the built in function %s",
			capName,
			f,
		)

		redirect(
			capName,
			comment,
			[]Code{Id("c").Op("...").Id("Code")},
			[]Code{Id("c").Op("...")},
		)

		/*
			func (s *Statement) {Name}(c ...Code) *Statement {
				return s.Id("{Name}").Call(c...)
			}
		*/
		file.Add(comment)
		file.Func().Params(
			Id("s").Op("*").Id("Statement"),
		).Id(capName).Params(
			Id("c").Op("...").Id("Code"),
		).Op("*").Id("Statement").Block(
			Return(
				Id("s", "Id").Call(
					Lit(f),
				).Op(".").Id("Call").Call(
					Id("c").Op("..."),
				),
			),
		)
	}

	err := file.Save("./generated.go")
	//err := file.Render(os.Stdout)
	if err != nil {
		panic(err)
	}

}
